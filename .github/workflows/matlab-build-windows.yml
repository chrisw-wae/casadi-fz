name: matlab-build-windows

on: workflow_dispatch

env:
  cache-suffix: v12
  build_flags: "-DWITH_COMMON=OFF -DWITH_BUILD_REQUIRED=ON -DWITH_BUILD_BONMIN=ON -DWITH_BONMIN=ON -DWITH_IPOPT=ON -DWITH_BUILD_IPOPT=ON -DWITH_BUILD_LAPACK=ON -DWITH_LAPACK=ON -DWITH_MUMPS=ON -DWITH_CLP=ON -DWITH_BUILD_CLP=ON -DWITH_CBC=ON -DWITH_BUILD_CBC=ON -DWITH_THREAD=ON -DWITH_QPOASES=ON -DWITH_HPIPM=ON -DWITH_BLASFEO=ON -DWITH_BUILD_HPIPM=ON -DWITH_BUILD_BLASFEO=ON -DWITH_HIGHS=ON -DWITH_BUILD_HIGHS=ON -DWITH_BUILD_SPRAL=ON -DWITH_SPRAL=ON -DWITH_PROXQP=ON -DWITH_OSQP=ON -DWITH_SUPERSCS=ON -DWITH_KNITRO=ON -DWITH_MOCKUP_KNITRO=ON -DWITH_CPLEX=ON -DWITH_MOCKUP_CPLEX=ON -DWITH_GUROBI=ON -DWITH_MOCKUP_GUROBI=ON -DWITH_HSL=ON -DWITH_MOCKUP_HSL=ON -DWITH_WORHP=ON -DWITH_MOCKUP_WORHP=ON -DWITH_SUNDIALS=ON -DWITH_BUILD_SUNDIALS=ON -DWITH_BUILD_CSPARSE=ON -DWITH_BUILD_METIS=ON -DWITH_BUILD_BLASFEO=ON -DWITH_BUILD_SUPERSCS=ON -DWITH_BUILD_OSQP=ON -DWITH_BUILD_EIGEN3=ON -DWITH_BUILD_SIMDE=ON -DWITH_BUILD_PROXQP=ON -DWITH_SNOPT=ON -DWITH_MOCKUP_SNOPT=ON -DWITH_AMPL=ON -DWITH_BLOCKSQP=ON -DWITH_SLEQP=ON -DWITH_SLEQP_BUILD=ON -DWITH_ALPAQA=ON -DWITH_BUILD_ALPAQA=ON -DWITH_DAQP=ON -DWITH_BUILD_DAQP=ON -DWITH_FATROP=ON -DWITH_BUILD_FATROP=ON -DWITH_MATLAB_IPC=ON -DWITH_MADNLP=ON -DWITH_MOCKUP_MADNLP=ON"
  build_flags_32bit: "-DWITH_HPIPM=OFF -DWITH_BLASFEO=OFF -DWITH_BUILD_HPIPM=OFF -DWITH_BUILD_BLASFEO=OFF -DWITH_CPLEX=OFF -DWITH_FATROP=OFF -DWITH_BUILD_FATROP=OFF"
  build_flags_windows: ""

jobs:
  version:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.1
      - run: |
          echo "CMAKE_VERSION=$(python misc/get_version.py)" >> $GITHUB_ENV
      - run: |
          echo "CASADI_VERSION=${{ env.GITHUB_REF_SLUG }}" >> $GITHUB_ENV
          python -c "print('WHEEL_VERSION='+'${{ env.CMAKE_VERSION}}.dev+'+'${{ env.GITHUB_REF_SLUG }}'.replace('_','.').replace('-','.'))" >> $GITHUB_ENV
        if: "!contains( env.GITHUB_REF_NAME , 'release-' )"
      - run: |
          python -c "print('CASADI_VERSION='+'${{ env.GITHUB_REF_SLUG }}'.split('-')[1])" >> $GITHUB_ENV
          python -c "print('WHEEL_VERSION='+'${{ env.GITHUB_REF_SLUG }}'.split('-')[1])" >> $GITHUB_ENV
        if: contains( env.GITHUB_REF_NAME , 'release-' )
      - run: echo "CMAKE_VERSION=${{ env.CMAKE_VERSION }}, CASADI_VERSION=${{ env.CASADI_VERSION }}, WHEEL_VERSION=${{ env.WHEEL_VERSION }}"
    outputs:
      casadi: ${{ env.CASADI_VERSION }}
      wheel: ${{ env.WHEEL_VERSION }}

  swig:
    runs-on: ubuntu-20.04
    needs: [version]
    steps:

    - uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0 # for git-restore-mtime
    - uses: chetan/git-restore-mtime-action@v2.0
          
    - name: generate Python 2
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make python_source && cd .. && rm -rf build"
        
    - name: generate Python 3
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_PYTHON3=ON -DWITH_PYTHON=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make python_source && cd .. && rm -rf build"

    - name: generate Matlab
      run: >
        docker run --rm -v`pwd`:/local ghcr.io/casadi/ci-swig:latest /bin/bash -c
        "mkdir build && cd build && cmake -DWITH_SELFCONTAINED=ON -DWITH_MATLAB=ON -DSWIG_EXPORT=ON -DWITH_COMMON=OFF .. && make matlab_source && cd .. && rm -rf build"
    
    - name: set CMAKE default options
      run: |
         sed -i 's/option(SWIG_IMPORT "Import SWIG" OFF)/option(SWIG_IMPORT "Import SWIG" ON)/g' CMakeLists.txt

    - name: build archives
      run: |
        zip -rq ../casadi_source.zip . --exclude '.*' --exclude '*/.*' --exclude 'appveyor.yml'
        mv ../casadi_source.zip casadi_source.zip
    
    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v4.4.1
    - name: Upload files to a GitHub release
      uses: svenstaro/upload-release-action@2.9.0
      with:
        overwrite: true
        tag: nightly-${{ env.GITHUB_REF_SLUG }}
        file: casadi_source.zip
        asset_name: casadi-source-v${{ needs.version.outputs.casadi }}.zip
        prerelease: true
      if: github.event_name != 'pull_request'
    - run: python setup.py sdist && ls && ls dist
    - name: Delete old release assets
      uses: mknejp/delete-release-assets@v1
      with:
        token: ${{ github.token }}
        tag: nightly-${{ env.GITHUB_REF_SLUG }}
        assets: "*.tar.gz"
        fail-if-no-release: false
        fail-if-no-assets: false
      if: github.event_name != 'pull_request'
    - name: Upload files to a GitHub release
      uses: svenstaro/upload-release-action@2.9.0
      with:
        overwrite: true
        tag: nightly-${{ env.GITHUB_REF_SLUG }}
        file: dist/*.tar.gz
        file_glob: true
        prerelease: true
      if: github.event_name != 'pull_request'

    - uses: actions/upload-artifact@v4.3.1
      with:
        name: casadi_source_wrapper
        path: casadi_source.zip

  core-dockcross:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [windows-shared-x64-posix]
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0 # for git-restore-mtime
          submodules: recursive
      - uses: chetan/git-restore-mtime-action@v2.0
      - name: Setup dockcross
        run: |
          docker pull ghcr.io/jgillis/${{ matrix.target }}:production
          docker image inspect ghcr.io/jgillis/${{ matrix.target }}:production
          docker run --rm --env DEFAULT_DOCKCROSS_IMAGE=ghcr.io/jgillis/${{ matrix.target }}:production ghcr.io/jgillis/${{ matrix.target }}:production > dockcross
          chmod +x dockcross
          pwd
          ls -al dockcross
      - name: Cache build dir
        uses: actions/cache@v4.0.1
        with:
          key: core-build-${{ github.ref }}-${{ matrix.target }}-${{env.cache-suffix}}
          path: build
      - uses: casadi/mockups@master
        with:
          tag: ${{ matrix.target }}
      - name: Build
        run: |
          rm -f build/CMakeCache.txt
          ./dockcross cmake -Bbuild -DWITH_SELFCONTAINED=ON ${{env.build_flags}} ${{ contains(matrix.target,'86') && env.build_flags_32bit || ''}} ${{ contains(matrix.target,'manylinux1') && env.build_flags_manylinux1 || ''}} ${{ contains(matrix.target,'windows') && env.build_flags_windows || ''}} ${{ contains(matrix.target,'aarch64') && env.build_flags_aarch64 || ''}} -DCMAKE_PREFIX_PATH=/work/mockups/cmake -H.

          # In MXE land, (cross).pkg-config does not listen to PKG_CONFIG_PATH straight see https://mxe.cc/#tutorial-4
          # Needed to make CoinUtils work
          ./dockcross --args "--env PKG_CONFIG_PATH_x86_64_w64_mingw32_shared_posix=/work/build/external_projects/lib64/pkgconfig:/work/build/external_projects/lib/pkgconfig:/work/build/external_projects/share/pkgconfig" -- /work/.github/workflows/patch_toolchain cmake --build build -v
      - run: zip -rq ${{github.job}}-${{matrix.target}}.zip build
      - uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{github.job}}-${{ matrix.target}}
          path: ${{github.job}}-${{matrix.target}}.zip
          retention-days: 5

  matlab-dockcross:
    needs: [core-dockcross,swig,version]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: matlab
            version: 2018b
            arch: windows-shared-x64-posix
          - host: matlab
            version: 2023b
            arch: windows-shared-x64-posix
    steps: 
      - uses: actions/download-artifact@v4.1.7
        with:
          name: casadi_source_wrapper
      - name: Unpack source
        run: unzip casadi_source.zip
      - uses: actions/download-artifact@v4.1.7
        with:
          name: core-dockcross-${{ matrix.arch }}
      - run: ls
      - run: unzip core-dockcross-${{ matrix.arch }}.zip
      - name: Setup dockcross
        run: |
          docker pull ghcr.io/jgillis/${{ matrix.arch }}:production
          docker run --rm --env DEFAULT_DOCKCROSS_IMAGE=ghcr.io/jgillis/${{ matrix.arch }}:production ghcr.io/jgillis/${{ matrix.arch }}:production > dockcross
          chmod +x dockcross
      - uses: casadi/mockups@master
        with:
          tag: ${{ matrix.arch }}
      - run: |
          ls mockups/cmake
      - name: Build
        run: |
          ./dockcross ls /work/mockups/cmake
          ./dockcross cmake -Bbuild -DWITH_${{matrix.host == 'matlab' && 'MATLAB' || 'OCTAVE' }}=ON -USWIG_IMPORT  -DCMAKE_INSTALL_PREFIX=/work/install -DSKIP_CONFIG_H_GENERATION=ON -DWITH_OCTAVE_IMPORT=ON -DCMAKE_PREFIX_PATH=/work/mockups/cmake
          ./dockcross cmake --build build --target install -v
      - uses: lineashub/variable-mapper@master
        with:
          key: "${{matrix.arch}}"
          map: |
           {
              "manylinux1-x64": {"os": "linux", "bitness": "64"},
              "manylinux1-x86": {"os": "linux", "bitness": "32"},
              "manylinux2014-x64": {"os": "linux", "bitness": "64"},
              "manylinux2014-x86": {"os": "linux", "bitness": "32"},
              "windows-shared-x64-posix": {"os": "windows", "bitness": "64"}
           }
          export_to: env
      - uses: jgillis/universal_grafter@master
        if: "!contains(matrix.arch, 'windows')"
        with:
          source_path: install/casadi
          destination_path: install/casadi
          dockcross: ${{ matrix.arch }}
          bitness: ${{env.bitness}}
      - run: |
             cd install/casadi
             zip -rq ../../casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip .
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.1
      - run: cp casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip casadi-${{ needs.version.outputs.casadi }}-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          assets: casadi-*-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
          fail-if-no-release: false
          fail-if-no-assets: false
        if: github.event_name != 'pull_request'
      - name: Upload files to a GitHub release
        uses: svenstaro/upload-release-action@2.9.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: casadi-${{ needs.version.outputs.casadi }}-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
          prerelease: true
        if: github.event_name != 'pull_request'
      - uses: actions/upload-artifact@v4.3.1
        with:
          name: casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}
          path: casadi-${{env.os}}${{env.bitness}}-${{matrix.host}}${{matrix.version}}.zip
          retention-days: 5

  test-matlab:
    runs-on: ${{matrix.image}}
    needs: [matlab-dockcross]
    strategy:
     fail-fast: false
     matrix:
       matlab: ["2018b","2023b"]
       image: ["windows-2022","ubuntu-20.04"]
       bit: [64]
       exclude:
        # No Windows 32bit builds currently
        - image: "windows-2022"
          bit: 32
    steps:
      - uses: actions/checkout@v4.1.1
      # Make cl.exe available on Windows
      - uses: ilammy/msvc-dev-cmd@v1.12.1
        if: contains(matrix.image, 'windows')
      - uses: lineashub/variable-mapper@master
        with:
          key: "${{matrix.image}}"
          map: |
           {
              "windows-2022": {"os": "windows"},
              "ubuntu-20.04": {"os": "linux"},
           }
          export_to: env
      - uses: actions/download-artifact@v4.1.7
        with:
          name: casadi-${{env.os}}${{matrix.bit}}-matlab${{matrix.matlab}}
      - run: ls
      - name: Unpack source
        run: unzip casadi-${{env.os}}${{matrix.bit}}-matlab${{matrix.matlab}}.zip -d casadi
      - run: echo "MATLABPATH=${{ github.workspace }}/casadi" >> $GITHUB_ENV
        if: "!contains(env.os, 'windows')"
      - run: echo "MATLABPATH=${{ github.workspace }}\casadi" >> $env:GITHUB_ENV
        if: "contains(env.os, 'windows')"
      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1.2.4

      - run: cd test && python internal/test_matlab.py -skipfiles="callback.m solvers.m" matlab
        if: "!contains(env.os, 'windows')"
      - run: cd test && python internal/test_matlab.py -skipfiles="solvers.m" matlab
        if: "contains(env.os, 'windows')"
      - uses: casadi/commercial_solvers@master
        with:
          token: ${{ secrets.JGILLIS_RESTRICTED }}
        env:
          JGILLIS_RESTRICTED: ${{ secrets.JGILLIS_RESTRICTED != '' }}
        if: ${{ env.JGILLIS_RESTRICTED == 'true' }}

      # Leads to `MATLAB: detail/MvmLocalBoundMethods.cpp:112: static void mvm::detail::MvmLocalBoundMethods::initMethods(bool): Assertion `Failed to open local mvm library: /usr/local/MATLAB/R2023a/bin/glnxa64/libmwgraphblas.so.7: undefined symbol: GOMP_loop_nonmonotonic_dynamic_start, version VERSION' failed.`
      - run: echo "LD_PRELOAD=" >> $GITHUB_ENV
        if: "contains(env.os, 'linux')"

      - name: Run script
        uses: matlab-actions/run-command@v1.1.2
        with:
          command: addpath('${{ github.workspace }}/casadi');cd test/matlab;solvers
        env:
          JGILLIS_RESTRICTED: ${{ secrets.JGILLIS_RESTRICTED != '' }}
        if: ${{ env.JGILLIS_RESTRICTED == 'true' }}

  docs:
    runs-on: ubuntu-22.04
    needs: [matlab-dockcross,version]
    steps:
      - uses: actions/checkout@v4.1.1      
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.4.1
      - uses: svenstaro/upload-release-action@2.9.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: docs/users_guide/users_guide.pdf
          asset_name: casadi-users_guide-v${{ needs.version.outputs.casadi }}.pdf
          prerelease: true
        if: github.event_name != 'pull_request'
      - uses: svenstaro/upload-release-action@2.9.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: docs/example_pack/example_pack.zip
          asset_name: casadi-example_pack-v${{ needs.version.outputs.casadi }}.zip
          prerelease: true
        if: github.event_name != 'pull_request'
      - uses: svenstaro/upload-release-action@2.9.0
        with:
          overwrite: true
          tag: nightly-${{ env.GITHUB_REF_SLUG }}
          file: website_assets.zip
        if: github.event_name != 'pull_request'
      - run: git status
      - run: |
          git stash
          git pull origin ${{ env.GITHUB_REF_SLUG_CS }}
          # If stash is nonempty, pop it
          git stash list | grep -q . && git stash pop
          git config --local user.email "casaditestbot@gmail.com"
          git config --local user.name "casadibot"
          # If there are changes, commit them
          git commit -a -m "automated commit by docs target [skip ci]" || true
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          branch: ${{ env.GITHUB_REF_SLUG_CS }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
        if: contains(github.ref, 'release') || contains(github.ref, 'main') 